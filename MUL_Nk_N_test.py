# Автор: Марков М.М. Группа - ПМИ-3381

from Types import nat_0
from MUL_Nk_N import MUL_Nk_N


def test_mul_nk():
    # Тестирование функции MUL_Nk_N
    # Малые значения
    assert MUL_Nk_N(nat_0([1], 1), 1) == nat_0([1, 0], 2)  # 1 * 10^1 = 10
    assert MUL_Nk_N(nat_0([0], 1), 3) == nat_0([0], 1)  # 0 * 10^3 = 0
    assert MUL_Nk_N(nat_0([5], 1), 0) == nat_0([5], 1)  # 5 * 10^0 = 5

    # Средние значения
    assert MUL_Nk_N(nat_0([2, 3], 2), 2) == nat_0([2, 3, 0, 0], 4)  # 23 * 10^2 = 2300
    assert MUL_Nk_N(nat_0([9, 8, 7], 3), 4) == nat_0([9, 8, 7, 0, 0, 0, 0], 7)  # 987 * 10^4 = 9870000
    assert MUL_Nk_N(nat_0([1, 5, 7], 3), 1) == nat_0([1, 5, 7, 0], 4)  # 157 * 10^1 = 1570

    # Большие значения
    assert MUL_Nk_N(nat_0([1], 1), 10) == nat_0([1] + [0] * 10, 11)  # 1 * 10^10 = 10000000000
    assert MUL_Nk_N(nat_0([9, 9], 2), 3) == nat_0([9, 9, 0, 0, 0], 5)  # 99 * 10^3 = 99000
    assert MUL_Nk_N(nat_0([1] * 50, 50), 5) == nat_0([1] * 50 + [0] * 5, 55)  # 111...1 * 10^5

    # Пограничные значения
    assert MUL_Nk_N(nat_0([1, 2], 2), 0) == nat_0([1, 2], 2)  # 12 * 10^0 = 12

    print("Все тесты для MUL_Nk_N пройдены успешно!")


if __name__ == "__main__":
    test_mul_nk()
