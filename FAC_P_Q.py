# FAC_P_Q.py
# Вынесение из многочлена НОК знаменателей коэффициентов и НОД числителей
# Автор: Сычев Н.С. Группа - ПМИ-3381

# struct: Многочлен с рациональными коэффициентами m – степень многочлена и массив C коэффициентов (P)

from Types import P, rat
from ABS_Z_Z import ABS_Z_Z
from GCF_NN_N import GCF_NN_N
from LCM_NN_N import LCM_NN_N
from TRANS_N_Z import TRANS_N_Z


def FAC_P_Q(p: P) -> rat: # функцию писал в момент, когда еще не был сделан класс P. потом подстроюсь под него.
    """
    Функция для вычисления НОД (GCD) числителей и НОК (LCM) знаменателей многочлена с рациональными коэффициентами
    """
    # эта штука нужна для упрощения полинома.
    # мы выносим полученное значение за скобки, получая удобный для решения полиномчик.
    
    # мы берем числители из дробей. они целые по определению rat. переводим их в натуральные. (т.к НОД - натуральное)
    numerators = [ABS_Z_Z(coeff.num) for coeff in p.coefficients] # массив натуральных чисел (был целым)
    # мы берем знаменатели из дробей. они натуральные по определению Q. 
    denominators = [coeff.den for coeff in p.denominators] # массив натуральных чисел
    
    # ну как минимум один коэф. у нас будет точно. поэтому определение НОДа как первого элемента массива корректно.
    gcd = numerators[0] #берем первое значение из массива. начальное значение для последующих вычислений.
    if p.degree > 1: # тут мы смотрим если коэффицентов полинома больше 1, то вычисляем НОД. 
        for i in numerators[1:]: # на каждой итерации вычислям НОД
            gcd = GCF_NN_N(gcd, i)
        
    # такой же мув для НОКа
    lcm = denominators[0]
    if p.degree > 1:
        for i in denominators[1:]: 
            lcm = LCM_NN_N(lcm, i)
        
    # не забываем перевести НОД в целое. (т.к на возврате рациональное)
    gcd = TRANS_N_Z(gcd)
    
    return rat(gcd, lcm) # возвращаем рациональное
